name: Main

on:
  push: 
    branches:
      - main
  pull_request:
    branches:
      - '*'
  release:
    types:
      - published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  nuGetDirectory: ${{ github.workspace }}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore
        run: dotnet restore

      - name: Pack
        run: dotnet pack --configuration Release --output ${{ env.nuGetDirectory }} --no-restore

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.nuGetDirectory }}/*.nupkg


  validate:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.nuGetDirectory }}

      - name: Install Validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      # Validate metadata and content of the NuGet package
      # https://www.nuget.org/packages/Meziantou.Framework.NuGetPackageValidation.Tool#readme-body-tab
      # If some rules are not applicable, you can disable them
      # using the --excluded-rules or --excluded-rule-ids option
      - name: Validate Package
        run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.nuGetDirectory }}/*.nupkg")

  deploy:
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ build, validate ]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.nuGetDirectory }}

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.nuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
